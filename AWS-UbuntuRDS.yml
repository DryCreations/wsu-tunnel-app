AWSTemplateFormatVersion: 2010-09-09
Description: >-
  WSU CS-3900 Server Template: This template creates a server to be used by the Spring 2019 CS-3900 project.
    The template automatcally sets up a EC2 server and peripherals, with a bash script for setup appearing in a file
    matching the pattern /var/lib/cloud/instances/*/user-data.txt. To setup the server, run the command
    "sudo bash /var/lib/cloud/instances/*/user-data.txt <BRANCH>", where <BRANCH> is the name of the branch from the git
    repository that the server should use.  The setup script will then run the start.bash file in that branch.
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type smaller than a t2.large.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: ''
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: ' The IP address range that can be used to access the EC2 instance'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DBPort:
    Description: 'The port that the database will be on'
    Type: String
    MinLength: 1
    MaxLength: 5
    Default: 3306
    AllowedPattern: '\d{1,5}'
    ConstraintDescription: Must be a one to five digit decimal integer
Mappings:
  AWSInstanceType2Arch:
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-0ac019f4fcb7cb7e6
      HVMG2: NOT_SUPPORTED
    us-west-2:
      PV64: NOT_SUPPORTED
      HVM64: NOT_SUPPORTED
      HVMG2: NOT_SUPPORTED
    us-west-1:
      PV64: NOT_SUPPORTED
      HVM64: NOT_SUPPORTED
      HVMG2: NOT_SUPPORTED
    us-east-2:
      PV64: NOT_SUPPORTED
      HVM64: NOT_SUPPORTED
      HVMG2: NOT_SUPPORTED
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: CS-3900 Special Subjects
  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/20
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  DatabaseSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.16.0/20
      AvailabilityZone: us-east-1a
  DatabaseSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.32.0/20
      AvailabilityZone: us-east-1b
  DatabaseSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.48.0/20
      AvailabilityZone: us-east-1c
  DatabaseSubnet4:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.64.0/20
      AvailabilityZone: us-east-1d
  DatabaseSubnet5:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.80.0/20
      AvailabilityZone: us-east-1e
  DatabaseSubnet6:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.96.0/20
      AvailabilityZone: us-east-1f
  DatabaseSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: default
      SubnetIds:
        - !Ref DatabaseSubnet1
        - !Ref DatabaseSubnet2
        - !Ref DatabaseSubnet3
        - !Ref DatabaseSubnet4
        - !Ref DatabaseSubnet5
        - !Ref DatabaseSubnet6
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  IPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref WebServerInstance
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22 and access to app features via ports 3000 and 5000
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '5000'
          ToPort: '5000'
          CidrIp: !Ref SSHLocation
  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Only allow traffic over the database port from local ip addresses
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          CidrIp: 10.0.0.0/16
  DatabaseInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: 'false'
      AutoMinorVersionUpgrade: 'true'
      DBInstanceClass: db.t2.micro
      Port: !Ref DBPort
      PubliclyAccessible: 'true'
      StorageType: gp2
      BackupRetentionPeriod: '7'
      MasterUsername: wsutunneladmin
      MasterUserPassword: MyPassword
      PreferredBackupWindow: '05:11-05:41'
      PreferredMaintenanceWindow: 'sun:03:30-sun:04:00'
      DBName: wustunnelapp
      Engine: mysql
      EngineVersion: 8.0.13
      LicenseModel: general-public-license
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      Tags:
        - Key: workload-type
          Value: other
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: Sample-instance
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
      UserData:
        Fn::Base64: |
          #!/bin/bash

          # Give the server some swap space
          fallocate -l 4G /swapfile
          chmod 0600 /swapfile
          mkswap /swapfile
          swapon /swapfile
          sysctl vm.swappiness=10

          # Install dependencies
          apt-get update
          yes | apt-get install build-essential
          yes | apt-get install git
          yes | apt-get install nodejs
          yes | apt-get install npm
          npm install -g react-scripts

          # Download the course repo
          git clone https://github.com/RLey/wsu-tunnel-app.git ~/repo

          # Get whatever branch the user specified and store it for future reference.
          # If no branch was specified, default to master
          branch=${1:-'master'}

          # Change directories to the downloaded repository
          pushd ~/repo

          # Checkout to the specified branch
          git checkout $branch

          # Run the setup script
          bash start.bash

          # Change back to the original working directory
          popd

          echo -e "\033[32;1mServer should be up and running at ${dig +short myip.opendns.com @resolver1.opendns.com}:3000\033[0m"
